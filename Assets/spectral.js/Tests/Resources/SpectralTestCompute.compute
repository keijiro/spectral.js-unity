#pragma kernel ColorBarValidation
#pragma kernel SpectralMixValidation

#include "SpectralReference.hlsl"

// Input textures
Texture2D<float4> ReferenceTexture;

// Output statistics buffer
// Structure: [totalPixels, acceptablePixels, warningPixels, errorPixels, maxErrorAsUint]
RWStructuredBuffer<uint> Statistics;

// Parameters
float ErrorThreshold;
float WarningThreshold;

// Color difference calculation (using max component for simpler debugging)
float ColorDifference(float3 color1, float3 color2) {
    float3 diff = abs(color1 - color2);
    return max(max(diff.r, diff.g), diff.b);
}

// Update statistics for a pixel
void UpdateStatistics(float diff) {
    InterlockedAdd(Statistics[0], 1); // Total pixels
    
    if (diff < ErrorThreshold) {
        InterlockedAdd(Statistics[1], 1); // Acceptable pixels
    } else if (diff < WarningThreshold) {
        InterlockedAdd(Statistics[2], 1); // Warning pixels
    } else {
        InterlockedAdd(Statistics[3], 1); // Error pixels
    }
    
    // Update max error
    uint diffAsUint = (uint)(diff * 10000.0);
    InterlockedMax(Statistics[4], diffAsUint);
}

[numthreads(4, 4, 1)]
void ColorBarValidation(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    ReferenceTexture.GetDimensions(width, height);
    
    if (id.x >= width || id.y >= height)
        return;
    
    // Only process color bar rows (17-18)
    uint colorBarStartRow = (uint)(height * 16.0 / 18.0);
    if (id.y < colorBarStartRow)
        return;

    // Flip Y coordinate to match GLSL bottom-left origin
    float2 st = (id.xy + 0.5) / float2(width, height);
    
    float3 expectedColor = GenerateReferenceColor(st, float2(width, height));
    float4 referenceColor = ReferenceTexture.Load(int3(id.xy, 0));
    float diff = ColorDifference(expectedColor, referenceColor.rgb);
    
    UpdateStatistics(diff);
}

[numthreads(4, 4, 1)]
void SpectralMixValidation(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    ReferenceTexture.GetDimensions(width, height);
    
    if (id.x >= width || id.y >= height)
        return;
    
    // Only process spectral mix test rows (1-16)
    uint colorBarStartRow = (uint)(height * 16.0 / 18.0);
    if (id.y >= colorBarStartRow)
        return;
    
    // Flip Y coordinate to match GLSL bottom-left origin
    float2 st = (id.xy + 0.5) / float2(width, height);
    
    float3 expectedColor = GenerateReferenceColor(st, float2(width, height));
    float4 referenceColor = ReferenceTexture.Load(int3(id.xy, 0));
    float diff = ColorDifference(expectedColor, referenceColor.rgb);
    
    UpdateStatistics(diff);
}